@page "/terminal"

@using System.Text.RegularExpressions
@using Yale.Portal.Services
@using System.Linq
@using Microsoft.JSInterop
@using System.Collections.Generic

@inject YaleService service

<h1>Yale terminal</h1>
<div class="container">
    <div class="row">
        <div class="col-sm">
            <span>Variables: @service.Variables.Count</span>
            <span>Expressions: @service.ExpressionKeys.Count()</span>
        </div>
    </div>
    <div class="row">
        <div id="terminal" class="col-sm-8" onclick="@Focus">
            @foreach (var line in _history)
            {
                <div>@line</div>
            }
            <div class="input">
                <label>yale:~$</label>
                <input ref="consoleInput" type="text" bind="@_inputValue" onkeyup="@KeyUp" />
            </div>
        </div>
        <aside class="col-sm-4">
            <h2>Variables</h2>
            <table>
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var variable in service.Variables)
                    {
                        <tr>
                            <td>@variable.Key</td>
                            <td>@variable.Value</td>
                        </tr>
                    }
                </tbody>
            </table>

            <h2>Expressions</h2>
            <table>
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var expressionKey in service.ExpressionKeys)
                    {
                        <tr>
                            <td>@expressionKey</td>
                            <td>@service.GetResult(expressionKey)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </aside>
    </div>

    <div class="row" style="padding-left:15px">
        <div class="col-sm-12">
            <h2>How to use:</h2>
            <p>Follow these steps to get a basic understanding for how yale evaluates expressions.</p>
            <h5>Add a variable</h5>
            <p>
                To add a variable just type <code>x=4, x=3.4 or x=hello</code> where x is the name of the variable, and what comes next is the value.
            </p>

            <h5>
                Add an expression
            </h5>
            <p>
                An expression lets you create more advanced functions. These are usually based on variables. Expressions are declaired using the :, like <code>e:2 * x</code>, where x references a variable.
                In this case <code>e</code> would be depend on <code>x</code>, and if <code>x</code> is updated so would the result of <code>e</code>. Expression can depend on either variables or other expressions.
            </p>

            <p>
                In this example application expressions can be
                <ul>
                    <li>Mathematic expression like <code>e:sqrt(x), e:x^2, e:x+5 or e:x/0.5.</code></li>
                    <li>Boolean like <code>e:x=x, e:x/4 = 1 or e:x=4 AND y=5</code></li>
                    <li>String manipulation: <code>y: "The number is " + x</code></li>
                    <li>Conditional: <code>If(a < 100; "smal"; "large")</code></li>
                </ul>
            </p>

            <p>
                In a custom application complex object can be manipulated and the instance can import static functions and constants.
            </p>

            <h5>Referencing and dependency handeling</h5>
            <p>
                Yale handels referenced values and expressions in on of 2 ways. Either by directly updating dependent expressions or lazy updating preceding expressions. These are used in different senarios depending.
                Lazy updating is faster if values are updated many times between each calculation.
                Direct updateing can be used to update ui element directly (like the variable and expressions tables on this page)
            </p>
        </div>
    </div>
</div>

@functions {

    private readonly Regex isValue = new Regex("^[a-zA-Z]+[=][\\w\\s.]+$");
    private readonly Regex isExpression = new Regex("[a-zA-Z]+[:].+$");
    private readonly Regex isEvaluate = new Regex("^[a-zA-Z]+$");

    private int maxHistory = 10;

    private int index = -1;
    private string _inputValue;

    private List<string> _cmdhistory = new List<string>();
    private List<string> _history = new List<string>();

    ElementRef consoleInput;

    void Focus()
    {
        JSRuntime.Current.InvokeAsync<object>("focusElement", consoleInput);
    }

    void KeyUp(UIKeyboardEventArgs e)
    {
        var key = e.Key;

        ConsoleFunctions();

        if (e.Key.Equals("Enter") == false) return;
        var input = _inputValue;
        index = -1;

        AddToHistory(_cmdhistory, _inputValue);

        if (isValue.IsMatch(input)) service.AddValue(input);
        else if (isEvaluate.IsMatch(input))
        {
            input = service.TryEvaluate(input);
        }
        else if ((isExpression.IsMatch(input) && service.AddExpression(input)) == false)
        {
            input = $"Invalid expression {input}";
        }

        AddToHistory(_history, (input));
        _inputValue = string.Empty;

        void AddToHistory(List<string> list, string value)
        {
            if (list.Count() > maxHistory)
            {
                list.RemoveAt(0);
            }
            list.Add(value);
        }

        void ConsoleFunctions()
        {
            if (_cmdhistory.Any())
            {
                if (key.Equals("ArrowUp"))
                {
                    index = index == -1 ? _cmdhistory.Count() - 1 : index == 0 ? index : index - 1;
                    _inputValue = _cmdhistory[index];
                }
                if (key.Equals("ArrowDown"))
                {
                    if (index == -1 || index + 1 == _cmdhistory.Count())
                    {
                        _inputValue = string.Empty;
                    }
                    else
                    {
                        index++;
                        _inputValue = _cmdhistory[index];
                    }
                }
            }
        }
    }

    protected override void OnInit()
    {
        service.Variables["Title"] = "Console";
    }
}